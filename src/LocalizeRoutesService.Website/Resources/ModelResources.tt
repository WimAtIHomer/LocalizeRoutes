<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#PrepareDataToRender(this); 
#>
using System;
using IHomer.Services.LocalizeRoutes;

namespace <#= RootNameSpace #>.Resources
{
	//// The Properties are following the namingconvention used by Phil Haack's ConventionalModelMetadataProvider 
    public static class ModelResources
    {

<#
	ProcessProjectItems(Project.ProjectItems);
#>

	}
}

<#+

void ProcessProjectItems(ProjectItems projectItems)
{
	foreach(ProjectItem item in  projectItems)
	{
		//WriteLine("////      " + item.Name);
		if(item.Name == "Models")
		{
			ModelFolderToResourceItems(item);
			ProcessProjectItems(item.ProjectItems);
		}
		else
		{
			ProcessProjectItems(item.ProjectItems);
		}
	}
}

void ModelFolderToResourceItems(ProjectItem item)
{
	foreach(ProjectItem cl in item.ProjectItems)
	{
		if (Path.GetExtension(cl.Name) == ".cs")
		{
			WriteLine("////      " + cl.Name);
			foreach (CodeElement t in cl.FileCodeModel.CodeElements) 
			{
				var c = FindClass(t.Children);
				if (c != null)
				{
					foreach(var x in c.Members)
    	         	{
 	    	            var p = x as CodeProperty;
						if (p != null)
						{
							WriteLine("      public static string " + cl.Name.Substring(0, cl.Name.Length - 3) + "_" + p.Name);
							WriteLine("      {");
							WriteLine("         get");
							WriteLine("         {");
							WriteLine("             return RouteResourceService.GetResource(\"" + p.Name + "\").ToString();");
							WriteLine("         }");
							WriteLine("      }");

							foreach(var z in p.Attributes)
	    	         		{
	 	    	                var a = z as CodeAttribute;
								WriteLine("      public static string " + cl.Name.Substring(0, cl.Name.Length - 3) + "_" + p.Name + "_" + a.Name);
								WriteLine("      {");
								WriteLine("         get");
								WriteLine("         {");
								WriteLine("             return RouteResourceService.GetResource(\"" + p.Name + a.Name + "\").ToString();");
								WriteLine("         }");
								WriteLine("      }");
							}
						}
					}
				}
			}
		}
	}
}

static DTE Dte;
static Project Project;
static string RootNameSpace;

	// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

void PrepareDataToRender(TextTransformation tt) {
// Get the DTE service from the host
    var serviceProvider = Host as IServiceProvider;
    if (serviceProvider != null) {
        Dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
    }

    // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
    if (Dte == null) {
        throw new Exception("T4MVC can only execute through the Visual Studio host");
    }

    Project = GetProjectContainingT4File(Dte);

    if (Project == null) {
        Error("Could not find the VS Project containing the T4 file.");
        return;
    } 

	RootNameSpace = Project.Properties.Item("RootNamespace").Value.ToString();
}

Project GetProjectContainingT4File(DTE dte) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);
	
    return projectItem.ContainingProject;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0) {

            results.Add(new ModelProperty {
                Name = prop.Name,
                ModelValueExpression = "Model.",
                ItemValueExpression = "item.",
                UnderlyingType = underlyingType,
                IsReadOnly = prop.GetSetMethod() == null
            });
        }
    }

    return results;
}

private CodeClass FindClass(CodeElements elements)
{ 
    foreach (CodeElement element in elements)
    {
		CodeClass codeClass = element as CodeClass;
        if (codeClass != null) return codeClass;
        codeClass = FindClass(element.Children);
        if (codeClass != null) return codeClass;
    }
    return null;
}

#>